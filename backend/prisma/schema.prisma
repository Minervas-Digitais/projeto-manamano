// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  NORMAL
  EVENT
  CLASS
}

enum RoleType {
  ADMIN
  MODERATOR
  MEMBER
}

model User {
  id           String    @id @default(uuid())
  fullName     String
  email        String    @unique
  phone        String    @unique
  hash         String
  savedPost    String[]
  birthday     DateTime?
  ethnicity    String?
  neighborhood String?
  expertise    String?
  enterprise   String?
  bio          String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  Participant Participant[]
  Post        Post[]
  Comment     Comment[]
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  inviteCode  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Participant Participant[]
  Category    Category[]
  Post        Post[]
}

model Participant {
  userId    String
  groupId   String
  role      RoleType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  type      PostType
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  Post  Post[]
}

model Post {
  id          String    @id @default(uuid())
  type        PostType
  input       String
  title       String?
  schedule    DateTime?
  urlLive     String?
  urlRecorded String?
  categoryId  String
  userId      String
  groupId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  File     File[]
  Comment  Comment[]
}

model File {
  id        String   @id @default(uuid())
  title     String?
  url       String?
  type      String
  size      Bytes?
  content   String?
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
